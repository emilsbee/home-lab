version: '3.9'

services:
    traefik:
        image: traefik
        container_name: traefik
        ports:
        - "80:80"
        - "443:443"
        networks:
            - web
        volumes:
            - ./traefik.yml:/etc/traefik/traefik.yml
            - /var/run/docker.sock:/var/run/docker.sock
            - ./acme.json:/acme.json
        labels:
            - traefik.enable=true
            - traefik.http.routers.api.rule=Host(`${TRAEFIK_DOMAIN}`)
            - traefik.http.routers.api.entrypoints=websecure
            - traefik.http.routers.api.service=api@internal
            - traefik.http.routers.api.tls=true
            - traefik.http.routers.api.tls.certresolver=lets-encrypt
            - traefik.http.routers.api.tls.domains=${TRAEFIK_DOMAIN}
            - traefik.http.middlewares.simpleAuth.basicauth.users=${TRAEFIK_USER}
            - traefik.http.routers.api.middlewares=simpleAuth
    rainbow-swagger-ui:
        image: swaggerapi/swagger-ui
        container_name: rainbow-swagger-ui
        restart: unless-stopped
        volumes: 
            - ${RAINBOW_SWAGGER_UI_PATH}:/swagger.json
        environment:
            SWAGGER_JSON: /swagger.json
        labels:
            - traefik.enable=true
            - traefik.http.routers.rainbow-swagger-ui.rule=Host(`${RAINBOW_SWAGGER_UI_DOMAIN}`)
            - traefik.http.routers.rainbow-swagger-ui.tls=true
            - traefik.http.routers.rainbow-swagger-ui.tls.certresolver=lets-encrypt
            - traefik.http.routers.rainbow-swagger-ui.entrypoints=websecure
            - traefik.http.routers.rainbow-swagger-ui.middlewares=simpleAuth
            # The label below basically says which docker container port 
            # the Traefik service should forward requests to. 
            - traefik.http.services.rainbow-swagger-ui.loadbalancer.server.port=8080        
        networks:
            - web  
    swagger:
        image: swaggerapi/swagger-editor
        container_name: swagger
        restart: unless-stopped
        labels:
            - traefik.enable=true
            - traefik.http.routers.swagger.rule=Host(`${SWAGGER_DOMAIN}`)
            - traefik.http.routers.swagger.tls=true
            - traefik.http.routers.swagger.tls.certresolver=lets-encrypt
            - traefik.http.routers.swagger.entrypoints=websecure
            
            # To access middleware defined in the dynamic configuration (traefik_dynamic.yml)
            # on must use the suffix @file otherwise just reference the name normally.
            - traefik.http.routers.swagger.middlewares=simpleAuth

            # The label below basically says which docker container port 
            # the Traefik service should forward requests to. 
            - traefik.http.services.swagger.loadbalancer.server.port=8080 
        networks:
            - web  
     
    pgadmin:
        image: dpage/pgadmin4
        container_name: "pgadmin"
        environment: 
            - PGADMIN_DEFAULT_EMAIL=${PG_ADMIN_EMAIL}
            - PGADMIN_DEFAULT_PASSWORD=${PG_ADMIN_PASSWORD}
        labels:
            - traefik.http.routers.pgadmin.rule=Host(`${PG_ADMIN_DOMAIN}`)
            - traefik.http.routers.pgadmin.tls=true
            - traefik.http.routers.pgadmin.tls.certresolver=lets-encrypt
            - traefik.http.routers.pgadmin.entrypoints=websecure
        networks:
            - web
            - internal
        restart: unless-stopped
        volumes:
          - type: bind
            source: ${PG_ADMIN_DATA_PATH}
            target: /var/lib/pgadmin

    postgres:
        container_name: postgres
        environment:
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        hostname: postgres
        image: postgres
        labels:
            - "traefik.enable=false"
        networks:
            - internal
        restart: unless-stopped
        volumes:
          - type: bind
            source: ${POSTGRES_DATA_PATH}
            target: /var/lib/postgresql/data

    redis:
        container_name: redis
        image: redis
        volumes:
            - type: bind
              source: ${REDIS_DATA_PATH}
              target: /data
        hostname: redis
        labels:
            - "traefik.enable=false"
        ports:
            - "6379:6379"
        networks:
            - internal
        restart: unless-stopped

    rainbow-backend:
        container_name: rainbow-backend
        image: mrfinance/rainbow-tracker-backend
        labels:
            - traefik.http.routers.rainbow-backend.rule=Host(`${RAINBOW_BACKEND_DOMAIN}`)
            - traefik.http.routers.rainbow-backend.tls=true
            - traefik.http.routers.rainbow-backend.tls.certresolver=lets-encrypt
            - traefik.http.routers.rainbow-backend.entrypoints=websecure
            # The label below basically says which docker container port 
            # the Traefik service should forward requests to. 
            - traefik.http.services.rainbow-backend.loadbalancer.server.port=3000 
        networks:
            - web
            - internal
networks:
    web:
        external: true
    internal:
        external: false
